
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module TopModule(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW,

	//////////// VGA //////////
	output		          		VGA_BLANK_N,
	output		     [7:0]		VGA_B,
	output		          		VGA_CLK,
	output		     [7:0]		VGA_G,
	output		          		VGA_HS,
	output		     [7:0]		VGA_R,
	output		          		VGA_SYNC_N,
	output		          		VGA_VS,

	//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_0,

	//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
	inout 		    [35:0]		GPIO_1
);

localparam
S_MENU = 2'd0,
S_COUNTDOWN = 2'd1,
S_1P = 2'd2,
S_2P = 2'd3;


wire vga_pll;
wire clk_60;
wire clk_10k;
wire clk_game;
wire clk_count;
wire clk_2;

ClockDivider #(2) my_div(
.clk(CLOCK_50),
.clk_out(vga_pll)
);

ClockDivider #(50000000) my_div0(
.clk(CLOCK_50),
.clk_out(clk_2)
);

ClockDivider #(833334) my_div1(
.clk(CLOCK_50),
.clk_out(clk_60)
);

ClockDivider #(500000) my_div2(
.clk(CLOCK_50),
.clk_out(clk_10k)
);


wire [3:0] buttons_gpio_not_debounced;
kontrol my_buttons(
    .clk(CLOCK_50), 
    .GPIO({{GPIO_0[9], GPIO_0[7], GPIO_0[5], GPIO_0[3], GPIO_0[1]}}), 
    .buttons(buttons_gpio_not_debounced)
);

wire [2:0] buttons2_gpio;
wire [3:0] buttons_gpio;
//assign buttons2_gpio = ~KEY[2:0];


button_debouncer key_debouncer1 (
  .clock        (clk_10k),
  .buttons_in        (buttons_gpio_not_debounced[0]),
  .buttons_debounced (buttons_gpio[0])
);

button_debouncer key_debouncer2 (
  .clock        (clk_10k),
  .buttons_in        (~KEY[0]),
  .buttons_debounced (buttons2_gpio[0])
);
button_debouncer key_debouncer3 (
  .clock		        (clk_10k),
  .buttons_in        (buttons_gpio_not_debounced[1]),
  .buttons_debounced (buttons_gpio[1])
);

button_debouncer key_debouncer4 (
  .clock        (clk_10k),
  .buttons_in        (~KEY[1]),
  .buttons_debounced (buttons2_gpio[1])
);
button_debouncer key_debouncer5 (
  .clock        (clk_10k),
  .buttons_in        (buttons_gpio_not_debounced[2]),
  .buttons_debounced (buttons_gpio[2])
);

button_debouncer key_debouncer6 (
  .clock        (clk_10k),
  .buttons_in        (~KEY[2]),
  .buttons_debounced (buttons2_gpio[2])
);

wire SW_1_debounced;
button_debouncer key_debouncer7 (
  .clock        (clk_10k),
  .buttons_in        (SW[1]),
  .buttons_debounced (SW_1_debounced)
);



assign clk_game = SW_1_debounced ? (KEY[3]):(clk_60);
assign clk_count = SW_1_debounced ? (KEY[3]):(clk_2);
wire [9:0] next_x;
wire [9:0] next_y;
reg [7:0] pixel_color;

vga_driver vga (
        .clock(vga_pll),
        .reset(1'b0),
        .color_in(pixel_color),
        .next_x(next_x),
        .next_y(next_y),
        .hsync(VGA_HS),
        .vsync(VGA_VS),
        .red(VGA_R),
        .green(VGA_G),
        .blue(VGA_B),
        .sync(VGA_SYNC_N),
        .clk(VGA_CLK),
        .blank(VGA_BLANK_N)
    );
	 
wire [6:0] hexout0_2P;
wire [6:0] hexout1_2P;
wire [6:0] hexout2_2P;
wire [6:0] hexout3_2P;
wire [6:0] hexout4_2P;
wire [6:0] hexout5_2P;

wire [2:0] lives1_2P;
wire [2:0] lives2_2P;

wire died1_2P;
wire died2_2P;

wire trigger_menu_2P;
wire [7:0] pixel_color_2P;
wire game_over2;

Game2P Game2P(.clock(vga_pll),        // 25 MHz PLL
			  .clk60(clk_game),
			  .clk2(clk_count),
			  .buttons({buttons2_gpio[2],buttons2_gpio[0],buttons2_gpio[1]}),
			  .buttons2({buttons_gpio[1],buttons_gpio[2],buttons_gpio[0]}),
			  .next_x(next_x),
			  .next_y(next_y),
			  .reset_n(reset_n_2P),
			  .pixel_color(pixel_color_2P),
			  .hexout0(hexout0_2P),
			  .hexout1(hexout1_2P),
			  .hexout2(hexout2_2P),
			  .hexout3(hexout3_2P),
			  .hexout4(hexout4_2P),
			  .hexout5(hexout5_2P),     
			  .lives1(lives1_2P),
			  .died1(died1_2P),
			  .lives2(lives2_2P),
			  .died2(died2_2P),
			  .game_over(game_over2),
			  .menu_can_start(trigger_menu_2P)
);

wire [6:0] hexout0_1P;
wire [6:0] hexout1_1P;
wire [6:0] hexout2_1P;
wire [6:0] hexout3_1P;
wire [6:0] hexout4_1P;
wire [6:0] hexout5_1P;

wire [2:0] lives1_1P;
wire [2:0] lives2_1P;

wire died1_1P;
wire died2_1P;

wire trigger_menu_1P;
wire [7:0] pixel_color_1P;
wire game_over1;


Game1P Game1P(.clock(vga_pll),        // 25 MHz PLL
			  .clk60(clk_game),
			  .clk2(clk_count),
			  .buttons({buttons2_gpio[2],buttons2_gpio[0],buttons2_gpio[1]}),
			  .next_x(next_x),
			  .next_y(next_y),
			  .reset_n(reset_n_1P),
			  .pixel_color(pixel_color_1P),
			  .hexout0(hexout0_1P),
			  .hexout1(hexout1_1P),
			  .hexout2(hexout2_1P),
			  .hexout3(hexout3_1P),
			  .hexout4(hexout4_1P),
			  .hexout5(hexout5_1P),     
			  .lives1(lives1_1P),
			  .died1(died1_1P),
			  .lives2(lives2_1P),
			  .died2(died2_1P),
			  .game_over(game_over1),
			  .menu_can_start(trigger_menu_1P)
);
wire trigger_count_start;
wire  [7:0] pixel_color_menu;
wire  [7:0] pixel_color_countdown;

wire trigger_gameplay_start;
wire game_mode_chosen;


wire [6:0] hex4_menu_out;
wire [6:0] hex5_menu_out;

game_menu my_menu(.sw(SW[0]), .clock(vga_pll), .next_x(next_x), .next_y(next_y), .reset_n(reset_n_menu), .confirm_button({buttons2_gpio[2],buttons2_gpio[0],buttons2_gpio[1]}), 
						.trigger_count_start(trigger_count_start), .hexout(hex5_menu_out), .hexout2(hex4_menu_out), .pixel_color(pixel_color_menu),
						.game_mode_chosen(game_mode_chosen), .clk60(clk_game)
);

countdown my_countdown(.clk(vga_pll), .clk60(clk_game), .reset_n(reset_n_countdown), .count_can_start(~reset_n_countdown), .next_x(next_x), 
						.next_y(next_y), .trigger_gameplay_start(trigger_gameplay_start), .pixel_color(pixel_color_countdown)
);

reg [6:0] HEX0_reg;
reg [6:0] HEX1_reg;
reg [6:0] HEX2_reg;
reg [6:0] HEX3_reg;
reg [6:0] HEX4_reg;
reg [6:0] HEX5_reg;


always @(*) begin
 
	 HEX0_reg = 7'b1111111; // Blank
	 HEX1_reg = 7'b1111111; // Blank
	 HEX2_reg = 7'b1111111; // Blank
	 HEX3_reg = 7'b1111111; // Blank
	 HEX4_reg = 7'b1111111; // Blank
	 HEX5_reg = 7'b1111111; // Blank
    case(game_current_state) 
        S_MENU: begin
            HEX4_reg = hex4_menu_out;
            HEX5_reg = hex5_menu_out;
				HEX0_reg = 7'b1111111; // Blank
				HEX1_reg = 7'b1111111; // Blank
				HEX2_reg = 7'b1111111; // Blank
				HEX3_reg = 7'b1111111; 

        end
        S_1P: begin
				HEX0_reg = hexout0_1P;
            HEX1_reg = hexout1_1P; 
            HEX2_reg = hexout2_1P; 
            HEX3_reg = hexout3_1P; 
            HEX4_reg = hexout4_1P; 
            HEX5_reg = hexout5_1P; 
        end
		  S_COUNTDOWN : begin
		  	 HEX0_reg = 7'b1111111; // Blank
			 HEX1_reg = 7'b1111111; // Blank
			 HEX2_reg = 7'b1111111; // Blank
			 HEX3_reg = 7'b1111111; // Blank
			 HEX4_reg = 7'b1111111; // Blank
			 HEX5_reg = 7'b1111111; // Blank
		  end
        S_2P: begin
				HEX0_reg = hexout0_2P;
            HEX1_reg = hexout1_2P; 
            HEX2_reg = hexout2_2P; 
            HEX3_reg = hexout3_2P; 
            HEX4_reg = hexout4_2P; 
            HEX5_reg = hexout5_2P; 
				
        end
		  default: begin
			 HEX0_reg = 7'b1111111; // Blank
			 HEX1_reg = 7'b1111111; // Blank
			 HEX2_reg = 7'b1111111; // Blank
			 HEX3_reg = 7'b1111111; // Blank
			 HEX4_reg = 7'b1111111; // Blank
			 HEX5_reg = 7'b1111111; // Blank
		  end
    endcase
end

reg  led9_reg;
reg  led8_reg;
reg led7_reg;
reg  led3_reg;
reg  led2_reg;
reg led1_reg;
reg  led6_reg;
reg led5_reg;
reg led4_reg;
reg led0_reg;

always @(*) begin
			led9_reg = 1'b0;
			led8_reg = 1'b0;
			led7_reg = 1'b0;
			led3_reg= 1'b0;
			led2_reg= 1'b0;
			led1_reg= 1'b0;
			led6_reg= 1'b0;
			led5_reg= 1'b0;
			led4_reg= 1'b0;
			led0_reg= 1'b0;
    case(game_current_state) 
        S_MENU: begin
			led9_reg = 1'b0;
			led8_reg = 1'b0;
			led7_reg = 1'b0;
			led3_reg= 1'b0;
			led2_reg= 1'b0;
			led1_reg= 1'b0;
			led6_reg= 1'b0;
			led5_reg= 1'b0;
			led4_reg= 1'b0;
			led0_reg= 1'b0;
          
        end
		  S_COUNTDOWN :begin
		  	led9_reg = 1'b0;
			led8_reg = 1'b0;
			led7_reg = 1'b0;
			led3_reg= 1'b0;
			led2_reg= 1'b0;
			led1_reg= 1'b0;
			led6_reg= 1'b0;
			led5_reg= 1'b0;
			led4_reg= 1'b0;
			led0_reg= 1'b0;
		  end
		S_1P: begin
		  if (game_over1 && !trigger_menu_1P) begin // Game over, waiting for menu trigger
				{led9_reg,led8_reg,led7_reg,led6_reg,led5_reg,led4_reg,led3_reg,led2_reg,led1_reg,led0_reg} = {10{clk_2}};
			end
			else begin
			led9_reg = lives1_1P[2];
			led8_reg = lives1_1P[1];
			led7_reg = lives1_1P[0];
			led3_reg= 1'b0;
			led5_reg= 1'b0;
			led4_reg= 1'b0;
			led6_reg= 1'b0;
			led2_reg= lives2_1P[2];
			led1_reg= lives2_1P[1];
			led0_reg= lives2_1P[0];
			end
        end
        S_2P: begin
		  if (game_over2 && !trigger_menu_2P) begin // Game over, waiting for menu trigger
				{led9_reg,led8_reg,led7_reg,led6_reg,led5_reg,led4_reg,led3_reg,led2_reg,led1_reg,led0_reg} = {10{clk_2}};
			 end
			 else begin
			led9_reg = lives1_2P[2];
			led8_reg = lives1_2P[1];
			led7_reg = lives1_2P[0];
			led3_reg= 1'b0;
			led5_reg= 1'b0;
			led4_reg= 1'b0;
			led6_reg= 1'b0;
			led2_reg= lives2_2P[2];
			led1_reg= lives2_2P[1];
			led0_reg= lives2_2P[0];
			end		
        end
		  default: begin
		  	led9_reg = 1'b0;
			led8_reg = 1'b0;
			led7_reg = 1'b0;
			led3_reg= 1'b0;
			led2_reg= 1'b0;
			led1_reg= 1'b0;
			led6_reg= 1'b0;
			led5_reg= 1'b0;
			led4_reg= 1'b0;
			led0_reg= 1'b0;
		  end
    endcase
end

assign LEDR[9] = led9_reg;
assign LEDR[8] = led8_reg;
assign LEDR[7] = led7_reg;
assign LEDR[6] = led6_reg;
assign LEDR[5] = led5_reg;
assign LEDR[4] = led4_reg;
assign LEDR[3] = led3_reg;
assign LEDR[2] = led2_reg;
assign LEDR[1] = led1_reg;
assign LEDR[0] = led0_reg;

assign HEX0 = HEX0_reg;
assign HEX1 = HEX1_reg;
assign HEX2 = HEX2_reg;
assign HEX3 = HEX3_reg;
assign HEX4 = HEX4_reg;
assign HEX5 = HEX5_reg;


reg [1:0] game_current_state = 2'd0;
reg [1:0] game_next_state = 2'd0;

reg reset_n_menu = 1'b0;
reg reset_n_countdown = 1'b1;
reg reset_n_1P = 1'b1;
reg reset_n_2P = 1'b1;


always @(*) begin
	case (game_current_state)
		S_MENU: begin
			if(trigger_count_start) begin
				game_next_state = S_COUNTDOWN;
			end
			else game_next_state = S_MENU;
		end
		S_COUNTDOWN: begin
			if(trigger_gameplay_start) begin
				case(game_mode_chosen)
					1'b0: begin
					game_next_state = S_1P;
					end
					1'b1: begin
					game_next_state = S_2P;
					end
				endcase
			end
			else game_next_state = S_COUNTDOWN;
		end
		S_1P: begin
			if (trigger_menu_1P) begin
				game_next_state = S_MENU;
			end
			else game_next_state = S_1P;
		end
		S_2P: begin
			if (trigger_menu_2P) begin
				game_next_state = S_MENU;
			end
			else game_next_state = S_2P;
		end
		default: begin
			game_next_state = S_MENU;
		end		
	endcase
end




always @(posedge vga_pll) begin
reset_n_menu      <= 1'b1;
reset_n_countdown <= 1'b1;
reset_n_1P        <= 1'b1;
reset_n_2P        <= 1'b1;

	if(game_current_state != game_next_state) begin
		case (game_next_state)
			S_MENU: begin
				reset_n_menu <= 1'b0;
				reset_n_countdown <= 1'b1;
				reset_n_1P        <= 1'b1;
				reset_n_2P        <= 1'b1;
				pixel_color <= pixel_color_menu;
			end
			S_COUNTDOWN: begin
				reset_n_countdown <= 1'b0;
				reset_n_menu      <= 1'b1;
				reset_n_1P        <= 1'b1;
				reset_n_2P        <= 1'b1;
				pixel_color <= pixel_color_countdown;
			end
			S_1P: begin
				reset_n_1P <= 1'b0;
				reset_n_menu      <= 1'b1;
				reset_n_countdown <= 1'b1;
				reset_n_2P        <= 1'b1;
				pixel_color <= pixel_color_1P;
			end
			S_2P: begin
				reset_n_2P <= 1'b0;
				reset_n_menu      <= 1'b1;
				reset_n_countdown <= 1'b1;
				reset_n_1P        <= 1'b1;
				pixel_color <= pixel_color_2P;
			end
		default: pixel_color <= pixel_color_menu;
		endcase
	end
	else begin
		case (game_next_state)
        S_MENU: begin
				pixel_color <= pixel_color_menu;
				reset_n_menu      <= 1'b0;
			end
        S_COUNTDOWN: begin
				pixel_color <= pixel_color_countdown;
				reset_n_countdown <= 1'b0;
		  end
        S_1P: begin
				pixel_color <= pixel_color_1P;
				reset_n_1P        <= 1'b0;
        end
		  S_2P: begin
		  pixel_color <= pixel_color_2P;
		  reset_n_2P        <= 1'b0;
		  end
        default: begin
		  pixel_color <= pixel_color_menu;
	  	  reset_n_menu      <= 1'b0;
		  end
		endcase
	end
	game_current_state <= game_next_state;
	
end


endmodule
